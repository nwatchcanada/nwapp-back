# Generated by Django 3.0.4 on 2020-04-04 23:47

from django.conf import settings
import django.contrib.gis.db.models.fields
import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import nwapp.s3utils
import sorl.thumbnail.fields
import tenant_foundation.models.task_item
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('shared_foundation', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AreaCoordinator',
            fields=[
                ('user', models.OneToOneField(help_text='The user whom is a member.', on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='area_coordinator', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('has_signed_area_coordinator_agreement', models.BooleanField(blank=True, default=False, help_text='Boolean indicates whether has agreed to the terms of service.', verbose_name='Has signed terms of service')),
                ('area_coordinator_agreement', models.TextField(blank=True, help_text='The actual terms of agreement the user agreed to when they signed.', null=True, verbose_name='Area Coordinator agreement')),
                ('area_coordinator_agreement_signed_on', models.DateTimeField(blank=True, help_text='The date the terms of service agreement was signed on.', null=True, verbose_name='Terms of service signed on')),
                ('has_signed_conflict_of_interest_agreement', models.BooleanField(blank=True, default=False, help_text='Boolean indicates whether has agreed to the conflict of interest agreement.', verbose_name='Has signed conflict of interest agreement')),
                ('conflict_of_interest_agreement', models.TextField(blank=True, help_text='The actual terms of conflict of interest agreement the user agreed to when they signed.', null=True, verbose_name='Conflict of interest agreement')),
                ('conflict_of_interest_agreement_signed_on', models.DateTimeField(blank=True, help_text='The date when the agreement was signed on.', null=True, verbose_name='Conflict of interest agreement signed on')),
                ('has_signed_code_of_conduct_agreement', models.BooleanField(blank=True, default=False, help_text='Boolean indicates whether has agreed to the code of conduct.', verbose_name='Has signed code of conduct agreement')),
                ('code_of_conduct_agreement', models.TextField(blank=True, help_text='The code of conduct agreement the user agreed to when they signed.', null=True, verbose_name='Code of conduct agreement')),
                ('code_of_conduct_agreement_signed_on', models.DateTimeField(blank=True, help_text='The date when the code of conduct agreement was signed on.', null=True, verbose_name='Code of conduct agreement signed on')),
                ('has_signed_confidentiality_agreement', models.BooleanField(blank=True, default=False, help_text='Boolean indicates whether has agreed to the confidentiality agreement.', verbose_name='Has signed confidentiality agreement')),
                ('confidentiality_agreement', models.TextField(blank=True, help_text='The actual terms of confidentiality agreement the user agreed to when they signed.', null=True, verbose_name='Confidentiality agreement')),
                ('confidentiality_agreement_signed_on', models.DateTimeField(blank=True, help_text='The date when the agreement was signed on.', null=True, verbose_name='Confidentiality agreement signed on')),
                ('police_check_date', models.DateField(blank=True, help_text='The date when the police check was taken on.', null=True, verbose_name='Police check date')),
                ('demotion_reason', models.PositiveSmallIntegerField(blank=True, choices=[(2, 'Some reason'), (3, 'Another reason'), (1, 'Other (Please specify)')], help_text='The reason for the demotion.', null=True, verbose_name='Demotion Reason')),
                ('demotion_reason_other', models.TextField(blank=True, help_text='The other reason for the demotion.', null=True, verbose_name='Demotion Reason (Other)')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('created_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the creator.', null=True, verbose_name='Created from')),
                ('created_from_is_public', models.BooleanField(blank=True, default=False, help_text='Is creator a public IP and is routable.', verbose_name='Is the IP ')),
                ('created_from_position', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text='The latitude and longitude coordinates for the creator.', null=True, srid=4326, verbose_name='Created from position')),
                ('last_modified_at', models.DateTimeField(auto_now=True)),
                ('last_modified_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the modifier.', null=True, verbose_name='Last modified from')),
                ('last_modified_from_is_public', models.BooleanField(blank=True, default=False, help_text='Is modifier a public IP and is routable.', verbose_name='Is the IP ')),
                ('last_modified_from_position', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text='The latitude and longitude coordinates for the last modified user.', null=True, srid=4326, verbose_name='Last modified from position')),
                ('created_by', models.ForeignKey(blank=True, help_text='The user whom created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_area_coordinators', to=settings.AUTH_USER_MODEL)),
                ('last_modified_by', models.ForeignKey(blank=True, help_text='The user whom modified this object last.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='last_modified_area_coordinators', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Area Coordinator',
                'verbose_name_plural': 'Area Coordinators',
                'db_table': 'nwapp_area_coordinators',
                'permissions': (),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Associate',
            fields=[
                ('user', models.OneToOneField(help_text='The user whom is an associate.', on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='associate', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('has_signed_conflict_of_interest_agreement', models.BooleanField(blank=True, default=False, help_text='Boolean indicates whether has agreed to the conflict of interest agreement.', verbose_name='Has signed conflict of interest agreement')),
                ('conflict_of_interest_agreement', models.TextField(blank=True, help_text='The actual terms of conflict of interest agreement the user agreed to when they signed.', null=True, verbose_name='Conflict of interest agreement')),
                ('conflict_of_interest_agreement_signed_on', models.DateTimeField(blank=True, help_text='The date when the agreement was signed on.', null=True, verbose_name='Conflict of interest agreement signed on')),
                ('has_signed_code_of_conduct_agreement', models.BooleanField(blank=True, default=False, help_text='Boolean indicates whether has agreed to the code of conduct.', verbose_name='Has signed code of conduct agreement')),
                ('code_of_conduct_agreement', models.TextField(blank=True, help_text='The code of conduct agreement the user agreed to when they signed.', null=True, verbose_name='Code of conduct agreement')),
                ('code_of_conduct_agreement_signed_on', models.DateTimeField(blank=True, help_text='The date when the code of conduct agreement was signed on.', null=True, verbose_name='Code of conduct agreement signed on')),
                ('has_signed_confidentiality_agreement', models.BooleanField(blank=True, default=False, help_text='Boolean indicates whether has agreed to the confidentiality agreement.', verbose_name='Has signed confidentiality agreement')),
                ('confidentiality_agreement', models.TextField(blank=True, help_text='The actual terms of confidentiality agreement the user agreed to when they signed.', null=True, verbose_name='Confidentiality agreement agreement')),
                ('confidentiality_agreement_signed_on', models.DateTimeField(blank=True, help_text='The date when the agreement was signed on.', null=True, verbose_name='Confidentiality agreement signed on')),
                ('has_signed_associate_agreement', models.BooleanField(blank=True, default=False, help_text='Boolean indicates whether has agreed to the associate agreement.', verbose_name='Has signed associate agreement')),
                ('associate_agreement', models.TextField(blank=True, help_text='The actual terms of associate agreement the user agreed to when they signed.', null=True, verbose_name='Associate agreement')),
                ('associate_agreement_signed_on', models.DateTimeField(blank=True, help_text='The date when the associate agreement was signed on.', null=True, verbose_name='Associate agreement signed on')),
                ('police_check_date', models.DateField(blank=True, help_text='The date when the police check was taken on.', null=True, verbose_name='Police check date')),
                ('demotion_reason', models.PositiveSmallIntegerField(blank=True, choices=[(2, 'Some reason'), (3, 'Another reason'), (1, 'Other (Please specify)')], help_text='The reason for the demotion.', null=True, verbose_name='Demotion Reason')),
                ('demotion_reason_other', models.TextField(blank=True, help_text='The other reason for the demotion.', null=True, verbose_name='Demotion Reason (Other)')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('created_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the creator.', null=True, verbose_name='Created from')),
                ('created_from_is_public', models.BooleanField(blank=True, default=False, help_text='Is creator a public IP and is routable.', verbose_name='Is the IP ')),
                ('created_from_position', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text='The latitude and longitude coordinates for the creator.', null=True, srid=4326, verbose_name='Created from position')),
                ('last_modified_at', models.DateTimeField(auto_now=True)),
                ('last_modified_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the modifier.', null=True, verbose_name='Last modified from')),
                ('last_modified_from_is_public', models.BooleanField(blank=True, default=False, help_text='Is modifier a public IP and is routable.', verbose_name='Is the IP ')),
                ('last_modified_from_position', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text='The latitude and longitude coordinates for the last modified user.', null=True, srid=4326, verbose_name='Last modified from position')),
                ('created_by', models.ForeignKey(blank=True, help_text='The user whom created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_associates', to=settings.AUTH_USER_MODEL)),
                ('last_modified_by', models.ForeignKey(blank=True, help_text='The user whom modified this object last.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='last_modified_associates', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Associate',
                'verbose_name_plural': 'Associates',
                'db_table': 'nwapp_associates',
                'permissions': (),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(help_text='The text content of this comment.', verbose_name='Text')),
                ('is_archived', models.BooleanField(blank=True, db_index=True, default=False, help_text='Indicates whether comment was archived.', verbose_name='Is Archived')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('created_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the creator.', null=True, verbose_name='Created from')),
                ('created_from_is_public', models.BooleanField(blank=True, default=False, help_text='Is creator a public IP and is routable.', verbose_name='Is the IP ')),
                ('created_from_position', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text='The latitude and longitude coordinates for the creator.', null=True, srid=4326, verbose_name='Created from position')),
                ('last_modified_at', models.DateTimeField(auto_now=True)),
                ('last_modified_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the modifier.', null=True, verbose_name='Last modified from')),
                ('last_modified_from_is_public', models.BooleanField(blank=True, default=False, help_text='Is modifier a public IP and is routable.', verbose_name='Is the IP ')),
                ('last_modified_from_position', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text='The latitude and longitude coordinates for the last modified user.', null=True, srid=4326, verbose_name='Last modified from position')),
                ('created_by', models.ForeignKey(blank=True, help_text='The user whom created this away log.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_comments', to=settings.AUTH_USER_MODEL)),
                ('last_modified_by', models.ForeignKey(blank=True, help_text='The user whom last modified this away log.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='last_modified_comments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Comment',
                'verbose_name_plural': 'Comments',
                'db_table': 'nwapp_comments',
                'ordering': ['-created_at'],
                'permissions': (),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='District',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_of', models.PositiveSmallIntegerField(choices=[(1, 'Residential'), (2, 'Business'), (3, 'Community Cares')], db_index=True, help_text='The type of score point this is.', verbose_name='Type of')),
                ('name', models.CharField(db_index=True, help_text='The name of this district.', max_length=127, unique=True, verbose_name='Name')),
                ('description', models.CharField(blank=True, help_text='The description of this district.', max_length=255, null=True, verbose_name='Description')),
                ('boundry_position', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text="The centre coordinates to apply for every map rendered on the user's screen.", null=True, srid=4326, verbose_name='Boundry Position')),
                ('boundry_zoom', models.FloatField(blank=True, help_text="The centre zoom to apply for every map rendered on the user's screen.", null=True, verbose_name='Boundry Map Zoom')),
                ('boundry_polygon', django.contrib.gis.db.models.fields.PolygonField(blank=True, help_text="The polygon of the district's boundry.", null=True, srid=4326, verbose_name='Boundry Polygon')),
                ('counselor_name', models.CharField(blank=True, help_text="The name of this district's counselor.", max_length=127, null=True, verbose_name='Counselor Name')),
                ('counselor_email', models.EmailField(blank=True, help_text="The email of this district's counselor.", max_length=127, null=True, verbose_name='Counselor Email')),
                ('counselor_phone', models.CharField(blank=True, help_text="The phone of this district's counselor.", max_length=31, null=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')], verbose_name='Counselor Phone')),
                ('website_url', models.URLField(blank=True, help_text='The external website link of this district.', max_length=255, null=True, verbose_name='Website URL')),
                ('indexed_text', models.CharField(blank=True, db_index=True, help_text='The searchable content text used by the keyword searcher function.', max_length=1023, null=True, unique=True, verbose_name='Indexed Text')),
                ('slug', models.SlugField(help_text='The unique identifier used externally.', max_length=255, unique=True, verbose_name='Slug')),
                ('is_archived', models.BooleanField(blank=True, db_index=True, default=False, help_text='Indicates whether district was archived or not', verbose_name='Is Archived')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('created_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the creator.', null=True, verbose_name='Created from')),
                ('created_from_is_public', models.BooleanField(blank=True, default=False, help_text='Is creator a public IP and is routable.', verbose_name='Is the IP ')),
                ('created_from_position', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text='The latitude and longitude coordinates for the creator.', null=True, srid=4326, verbose_name='Created from position')),
                ('last_modified_at', models.DateTimeField(auto_now=True)),
                ('last_modified_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the modifier.', null=True, verbose_name='Last modified from')),
                ('last_modified_from_is_public', models.BooleanField(blank=True, default=False, help_text='Is modifier a public IP and is routable.', verbose_name='Is the IP ')),
                ('last_modified_from_position', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text='The latitude and longitude coordinates for the last modified user.', null=True, srid=4326, verbose_name='Last modified from position')),
                ('created_by', models.ForeignKey(blank=True, help_text='The user whom created this score point.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_districts', to=settings.AUTH_USER_MODEL)),
                ('governors', models.ManyToManyField(blank=True, help_text='The associates which are responsible for the operation of the district.', related_name='governing', to='tenant_foundation.Associate')),
                ('last_modified_by', models.ForeignKey(blank=True, help_text='The user whom last modified this private image upload.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='last_modified_districts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'District',
                'verbose_name_plural': 'Districts',
                'db_table': 'nwapp_districts',
                'permissions': (),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='ExpectationItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(db_index=True, help_text='The text content of this item.', max_length=127, unique=True, verbose_name='Text')),
                ('sort_number', models.PositiveSmallIntegerField(blank=True, db_index=True, default=0, help_text='The number this item will appear when sorted by number.', verbose_name='Sort #')),
                ('is_for_associate', models.BooleanField(blank=True, default=True, help_text='Indicates this option will be visible for the associate.', verbose_name='Is for associate')),
                ('is_for_customer', models.BooleanField(blank=True, default=True, help_text='Indicates this option will be visible for the customer.', verbose_name='Is for customer')),
                ('is_for_staff', models.BooleanField(blank=True, default=True, help_text='Indicates this option will be visible for the staff.', verbose_name='Is for staff')),
                ('is_for_partner', models.BooleanField(blank=True, default=True, help_text='Indicates this option will be visible for the partner.', verbose_name='Is for partner')),
                ('is_archived', models.BooleanField(blank=True, db_index=True, default=False, help_text='Indicates whether how hear item was archived.', verbose_name='Is Archived')),
                ('slug', models.SlugField(help_text='The unique identifier used externally.', max_length=255, unique=True, verbose_name='Slug')),
            ],
            options={
                'verbose_name': 'What do you expect from NW Item',
                'verbose_name_plural': 'What do you expect from NW Items',
                'db_table': 'nwapp_expectation_items',
                'permissions': (),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('state', models.CharField(blank=True, choices=[('active', 'Active'), ('inactive', 'Inactive'), ('archived', 'Archived')], db_index=True, default='active', help_text='The state of this item.', max_length=15, verbose_name='State')),
                ('description', models.TextField(blank=True, default='', help_text='A short description of this item, if it has one.', null=True, verbose_name='Description')),
                ('start_at', models.DateTimeField(blank=True, help_text='The date and time this item will start if it is an event.', null=True, verbose_name='Start at')),
                ('is_all_day_event', models.BooleanField(blank=True, default=False, help_text='Is this event item full day?', verbose_name='Is all day event')),
                ('finish_at', models.DateTimeField(blank=True, help_text='The date and time this item will finish if it is an event.', null=True, verbose_name='Finish at')),
                ('title', models.CharField(blank=True, default='', help_text='The title of the item, if it has one.', max_length=63, null=True, verbose_name='Title')),
                ('external_url', models.URLField(blank=True, default='', help_text='The URL for the item to reference an external address.', max_length=63, null=True, verbose_name='External URL')),
                ('shown_to_whom', models.PositiveSmallIntegerField(blank=True, choices=[(2, 'General Public'), (3, 'All NW Staff'), (4, 'My Watch Area')], help_text='The person / organization that is allowed to view this item.', null=True, verbose_name='Shown to whom?')),
                ('can_be_posted_on_social_media', models.BooleanField(blank=True, default=True, help_text='Has the poster allowed this item be posted on social media?', verbose_name='Can be posted on Social Media?')),
                ('has_notified_authorities', models.BooleanField(blank=True, default=False, help_text='Has notified authorities?', null=True, verbose_name='Has notified authorities')),
                ('has_accept_authority_cooperation', models.BooleanField(blank=True, default=False, help_text='Has user agreed to the fact that NW can contact the local and federal police services?', null=True, verbose_name='Has accepted authority cooperation')),
                ('date', models.DateField(blank=True, help_text='The date this item occured.', null=True, verbose_name='Date')),
                ('location', models.CharField(blank=True, default='', help_text='The location of where this event occured.', max_length=127, null=True, verbose_name='Location')),
                ('who_news_for', models.PositiveSmallIntegerField(blank=True, choices=[(2, 'My City'), (3, 'My District'), (4, 'My Watch')], help_text='Whome shall see this news item?', null=True, verbose_name='Who news for?')),
                ('format_type', models.PositiveSmallIntegerField(blank=True, choices=[(2, 'Link'), (3, 'YouTube Video'), (4, 'Image'), (5, 'File'), (6, 'Unspecified')], default=6, help_text='The format type of resource.', null=True, verbose_name='Format Type')),
                ('embed_code', models.CharField(blank=True, default='', help_text='The YouTube embed code for this item.', max_length=1023, null=True, verbose_name='Embed Code')),
                ('slug', models.SlugField(help_text='The unique identifier used externally.', max_length=255, unique=True, verbose_name='Slug')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('created_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the creator.', null=True, verbose_name='Created from')),
                ('created_from_is_public', models.BooleanField(blank=True, default=False, help_text='Is creator a public IP and is routable.', verbose_name='Is the IP ')),
                ('created_from_position', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text='The latitude and longitude coordinates for the creator.', null=True, srid=4326, verbose_name='Created from position')),
                ('last_modified_at', models.DateTimeField(auto_now=True)),
                ('last_modified_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the modifier.', null=True, verbose_name='Last modified from')),
                ('last_modified_from_is_public', models.BooleanField(blank=True, default=False, help_text='Is modifier a public IP and is routable.', verbose_name='Is the IP ')),
                ('last_modified_from_position', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text='The latitude and longitude coordinates for the last modified user.', null=True, srid=4326, verbose_name='Last modified from position')),
                ('created_by', models.ForeignKey(blank=True, help_text='The user whom created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_items', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Item',
                'verbose_name_plural': 'Items',
                'db_table': 'nwapp_items',
                'permissions': (),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='MeaningItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(help_text='The unique identifier used externally.', max_length=255, unique=True, verbose_name='Slug')),
                ('text', models.CharField(db_index=True, help_text='The text content of this item.', max_length=127, unique=True, verbose_name='Text')),
                ('sort_number', models.PositiveSmallIntegerField(blank=True, db_index=True, default=0, help_text='The number this item will appear when sorted by number.', verbose_name='Sort #')),
                ('is_for_associate', models.BooleanField(blank=True, default=True, help_text='Indicates this option will be visible for the associate.', verbose_name='Is for associate')),
                ('is_for_customer', models.BooleanField(blank=True, default=True, help_text='Indicates this option will be visible for the customer.', verbose_name='Is for customer')),
                ('is_for_staff', models.BooleanField(blank=True, default=True, help_text='Indicates this option will be visible for the staff.', verbose_name='Is for staff')),
                ('is_for_partner', models.BooleanField(blank=True, default=True, help_text='Indicates this option will be visible for the partner.', verbose_name='Is for partner')),
                ('is_archived', models.BooleanField(blank=True, db_index=True, default=False, help_text='Indicates whether how hear item was archived.', verbose_name='Is Archived')),
            ],
            options={
                'verbose_name': 'What does NW mean to you Item',
                'verbose_name_plural': 'What does NW mean to you Items',
                'db_table': 'nwapp_meaning_items',
                'permissions': (),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Member',
            fields=[
                ('user', models.OneToOneField(help_text='The user whom is a member.', on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='member', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('type_of', models.PositiveSmallIntegerField(choices=[(2, 'Business'), (1, 'Residential'), (3, 'Community Cares')], db_index=True, help_text='The type of member this is.', verbose_name='Type of')),
                ('state', models.CharField(blank=True, choices=[('active', 'Active'), ('inactive', 'Inactive')], db_index=True, default='active', help_text='The state of this member.', max_length=15, verbose_name='State')),
                ('deactivation_reason', models.PositiveSmallIntegerField(blank=True, choices=[(2, 'Blacklisted'), (3, 'Moved'), (4, 'Deceased'), (5, 'Do not contact'), (0, 'Not specified'), (1, 'Other')], default=0, help_text='The reason why this member was deactivated.', verbose_name='Deactivation reason')),
                ('deactivation_reason_other', models.CharField(blank=True, default='', help_text='The reason why this member was deactivated which was not in the list.', max_length=2055, null=True, verbose_name='Deactivation reason (other)')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('created_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the creator.', null=True, verbose_name='Created from')),
                ('created_from_is_public', models.BooleanField(blank=True, default=False, help_text='Is creator a public IP and is routable.', verbose_name='Is the IP ')),
                ('created_from_position', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text='The latitude and longitude coordinates for the creator.', null=True, srid=4326, verbose_name='Created from position')),
                ('last_modified_at', models.DateTimeField(auto_now=True)),
                ('last_modified_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the modifier.', null=True, verbose_name='Last modified from')),
                ('last_modified_from_is_public', models.BooleanField(blank=True, default=False, help_text='Is modifier a public IP and is routable.', verbose_name='Is the IP ')),
                ('last_modified_from_position', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text='The latitude and longitude coordinates for the last modified user.', null=True, srid=4326, verbose_name='Last modified from position')),
                ('indexed_text', models.CharField(blank=True, db_index=True, help_text='The searchable content text used by the keyword searcher function.', max_length=1023, null=True, unique=True, verbose_name='Indexed Text')),
            ],
            options={
                'verbose_name': 'Member',
                'verbose_name_plural': 'Members',
                'db_table': 'nwapp_members',
                'permissions': (),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='PrivateFileUpload',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(help_text='The unique identifier used externally.', max_length=255, unique=True, verbose_name='Slug')),
                ('data_file', models.FileField(help_text='The upload binary file.', storage=nwapp.s3utils.PrivateMediaStorage(), upload_to='uploads/%Y/%m/%d/')),
                ('title', models.CharField(blank=True, help_text='The file title of this upload.', max_length=63, null=True, verbose_name='Title')),
                ('description', models.TextField(blank=True, help_text='The text content of this upload.', null=True, verbose_name='Description')),
                ('is_archived', models.BooleanField(blank=True, db_index=True, default=False, help_text='Indicates whether private file was archived.', verbose_name='Is Archived')),
                ('indexed_text', models.CharField(blank=True, db_index=True, help_text='The searchable content text used by the keyword searcher function.', max_length=511, null=True, unique=True, verbose_name='Indexed Text')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('created_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the creator.', null=True, verbose_name='Created from')),
                ('created_from_is_public', models.BooleanField(blank=True, default=False, help_text='Is creator a public IP and is routable.', verbose_name='Is the IP ')),
                ('created_from_position', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text='The latitude and longitude coordinates for the creator.', null=True, srid=4326, verbose_name='Created from position')),
                ('last_modified_at', models.DateTimeField(auto_now=True)),
                ('last_modified_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the modifier.', null=True, verbose_name='Last modified from')),
                ('last_modified_from_is_public', models.BooleanField(blank=True, default=False, help_text='Is modifier a public IP and is routable.', verbose_name='Is the IP ')),
                ('last_modified_from_position', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text='The latitude and longitude coordinates for the last modified user.', null=True, srid=4326, verbose_name='Last modified from position')),
                ('created_by', models.ForeignKey(blank=True, help_text='The user whom created this file.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_private_file_uploads', to=settings.AUTH_USER_MODEL)),
                ('district', models.ForeignKey(blank=True, help_text='The district whom this file belongs to.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='private_file_uploads', to='tenant_foundation.District')),
                ('item', models.ForeignKey(blank=True, help_text='The items whom this file belongs to.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='private_file_uploads', to='tenant_foundation.Item')),
                ('last_modified_by', models.ForeignKey(blank=True, help_text='The user whom last modified this private file upload.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='last_modified_private_file_uploads', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Private File Upload',
                'verbose_name_plural': 'Private File Uploads',
                'db_table': 'nwapp_private_file_uploads',
                'permissions': (),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='PrivateImageUpload',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(help_text='The unique identifier used externally.', max_length=255, unique=True, verbose_name='Slug')),
                ('image_file', sorl.thumbnail.fields.ImageField(help_text='The upload image.', storage=nwapp.s3utils.PrivateMediaStorage(), upload_to='uploads/%Y/%m/%d/')),
                ('title', models.CharField(blank=True, help_text='The image title of this upload.', max_length=63, null=True, verbose_name='Title')),
                ('description', models.TextField(blank=True, help_text='The text content of this upload.', null=True, verbose_name='Description')),
                ('is_archived', models.BooleanField(blank=True, db_index=True, default=False, help_text='Indicates whether private image was archived.', verbose_name='Is Archived')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('created_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the creator.', null=True, verbose_name='Created from')),
                ('created_from_is_public', models.BooleanField(blank=True, default=False, help_text='Is creator a public IP and is routable.', verbose_name='Is the IP ')),
                ('created_from_position', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text='The latitude and longitude coordinates for the creator.', null=True, srid=4326, verbose_name='Created from position')),
                ('last_modified_at', models.DateTimeField(auto_now=True)),
                ('last_modified_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the modifier.', null=True, verbose_name='Last modified from')),
                ('last_modified_from_is_public', models.BooleanField(blank=True, default=False, help_text='Is modifier a public IP and is routable.', verbose_name='Is the IP ')),
                ('last_modified_from_position', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text='The latitude and longitude coordinates for the last modified user.', null=True, srid=4326, verbose_name='Last modified from position')),
                ('created_by', models.ForeignKey(blank=True, help_text='The user whom created this image.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_private_image_uploads', to=settings.AUTH_USER_MODEL)),
                ('district', models.ForeignKey(blank=True, help_text='The district whom this image belongs to.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='private_image_uploads', to='tenant_foundation.District')),
                ('item', models.ForeignKey(blank=True, help_text='The item whom this image belongs to.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='private_image_uploads', to='tenant_foundation.Item')),
                ('last_modified_by', models.ForeignKey(blank=True, help_text='The user whom last modified this private image upload.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='last_modified_private_image_uploads', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Private Image Upload',
                'verbose_name_plural': 'Private Image Uploads',
                'db_table': 'nwapp_private_image_uploads',
                'permissions': (),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Staff',
            fields=[
                ('user', models.OneToOneField(help_text='The user whom is an staff.', on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='staff', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('has_signed_conflict_of_interest_agreement', models.BooleanField(blank=True, default=False, help_text='Boolean indicates whether has agreed to the conflict of interest agreement.', verbose_name='Has signed conflict of interest agreement')),
                ('conflict_of_interest_agreement', models.TextField(blank=True, help_text='The actual terms of conflict of interest agreement the user agreed to when they signed.', null=True, verbose_name='Conflict of interest agreement')),
                ('conflict_of_interest_agreement_signed_on', models.DateTimeField(blank=True, help_text='The date when the agreement was signed on.', null=True, verbose_name='Conflict of interest agreement signed on')),
                ('has_signed_code_of_conduct_agreement', models.BooleanField(blank=True, default=False, help_text='Boolean indicates whether has agreed to the code of conduct.', verbose_name='Has signed code of conduct agreement')),
                ('code_of_conduct_agreement', models.TextField(blank=True, help_text='The code of conduct agreement the user agreed to when they signed.', null=True, verbose_name='Code of conduct agreement')),
                ('code_of_conduct_agreement_signed_on', models.DateTimeField(blank=True, help_text='The date when the code of conduct agreement was signed on.', null=True, verbose_name='Code of conduct agreement signed on')),
                ('has_signed_confidentiality_agreement', models.BooleanField(blank=True, default=False, help_text='Boolean indicates whether has agreed to the confidentiality agreement.', verbose_name='Has signed confidentiality agreement')),
                ('confidentiality_agreement', models.TextField(blank=True, help_text='The actual terms of confidentiality agreement the user agreed to when they signed.', null=True, verbose_name='Confidentiality agreement agreement')),
                ('confidentiality_agreement_signed_on', models.DateTimeField(blank=True, help_text='The date when the agreement was signed on.', null=True, verbose_name='Confidentiality agreement signed on')),
                ('has_signed_staff_agreement', models.BooleanField(blank=True, default=False, help_text='Boolean indicates whether has agreed to the staff agreement.', verbose_name='Has signed staff agreement')),
                ('staff_agreement', models.TextField(blank=True, help_text='The actual terms of staff agreement the user agreed to when they signed.', null=True, verbose_name='Staff agreement')),
                ('staff_agreement_signed_on', models.DateTimeField(blank=True, help_text='The date when the staff agreement was signed on.', null=True, verbose_name='Staff agreement signed on')),
                ('police_check_date', models.DateField(blank=True, help_text='The date when the police check was taken on.', null=True, verbose_name='Police check date')),
                ('demotion_reason', models.PositiveSmallIntegerField(blank=True, choices=[(2, 'Some reason'), (3, 'Another reason'), (1, 'Other (Please specify)')], help_text='The reason for the demotion.', null=True, verbose_name='Demotion Reason')),
                ('demotion_reason_other', models.TextField(blank=True, help_text='The other reason for the demotion.', null=True, verbose_name='Demotion Reason (Other)')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('created_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the creator.', null=True, verbose_name='Created from')),
                ('created_from_is_public', models.BooleanField(blank=True, default=False, help_text='Is creator a public IP and is routable.', verbose_name='Is the IP ')),
                ('created_from_position', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text='The latitude and longitude coordinates for the creator.', null=True, srid=4326, verbose_name='Created from position')),
                ('last_modified_at', models.DateTimeField(auto_now=True)),
                ('last_modified_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the modifier.', null=True, verbose_name='Last modified from')),
                ('last_modified_from_is_public', models.BooleanField(blank=True, default=False, help_text='Is modifier a public IP and is routable.', verbose_name='Is the IP ')),
                ('last_modified_from_position', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text='The latitude and longitude coordinates for the last modified user.', null=True, srid=4326, verbose_name='Last modified from position')),
                ('created_by', models.ForeignKey(blank=True, help_text='The user whom created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_staves', to=settings.AUTH_USER_MODEL)),
                ('last_modified_by', models.ForeignKey(blank=True, help_text='The user whom modified this object last.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='last_modified_staves', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Staff',
                'verbose_name_plural': 'Staves',
                'db_table': 'nwapp_staves',
                'permissions': (),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(db_index=True, help_text='The text content of this tag.', max_length=31, unique=True, verbose_name='Text')),
                ('description', models.TextField(blank=True, default='', help_text='A short description of this tag.', null=True, verbose_name='Description')),
                ('is_archived', models.BooleanField(blank=True, db_index=True, default=False, help_text='Indicates whether tag was archived.', verbose_name='Is Archived')),
                ('slug', models.SlugField(help_text='The unique identifier used externally.', max_length=255, unique=True, verbose_name='Slug')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('created_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the creator.', null=True, verbose_name='Created from')),
                ('created_from_is_public', models.BooleanField(blank=True, default=False, help_text='Is creator a public IP and is routable.', verbose_name='Is the IP ')),
                ('created_from_position', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text='The latitude and longitude coordinates for the creator.', null=True, srid=4326, verbose_name='Created from position')),
                ('last_modified_at', models.DateTimeField(auto_now=True)),
                ('last_modified_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the modifier.', null=True, verbose_name='Last modified from')),
                ('last_modified_from_is_public', models.BooleanField(blank=True, default=False, help_text='Is modifier a public IP and is routable.', verbose_name='Is the IP ')),
                ('last_modified_from_position', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text='The latitude and longitude coordinates for the last modified user.', null=True, srid=4326, verbose_name='Last modified from position')),
                ('created_by', models.ForeignKey(blank=True, help_text='The user whom created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_tags', to=settings.AUTH_USER_MODEL)),
                ('last_modified_by', models.ForeignKey(blank=True, help_text='The user whom modified this object last.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='last_modified_tags', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
                'db_table': 'nwapp_tags',
                'permissions': (),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Watch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('state', models.CharField(blank=True, choices=[('active', 'Active'), ('inactive', 'Inactive')], db_index=True, default='active', help_text='The state of this watch.', max_length=15, verbose_name='State')),
                ('type_of', models.PositiveSmallIntegerField(choices=[(2, 'Business'), (1, 'Residential'), (3, 'Community Cares')], db_index=True, help_text='The type of watch this is.', verbose_name='Type of')),
                ('name', models.CharField(db_index=True, help_text='The name of this watch.', max_length=63, unique=True, verbose_name='Name')),
                ('description', models.TextField(blank=True, default='', help_text='A short description of this watch.', null=True, verbose_name='Description')),
                ('is_virtual', models.BooleanField(blank=True, db_index=True, default=False, help_text='Indicates whether watch is a virtual watch.', verbose_name='Is Virtual Watch')),
                ('deactivation_reason', models.PositiveSmallIntegerField(blank=True, choices=[(2, 'No Area Coordinator'), (3, 'Watch has collectively opted out of program'), (4, 'Watch Area not compliant'), (1, 'Other'), (0, 'Not specified')], default=0, help_text='The reason why this watch was deactivated.', verbose_name='Deactivation reason')),
                ('deactivation_reason_other', models.CharField(blank=True, default='', help_text='The reason why this watch was deactivated which was not in the list.', max_length=2055, null=True, verbose_name='Deactivation reason (other)')),
                ('boundry_position', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text="The centre coordinates to apply for every map rendered on the user's screen.", null=True, srid=4326, verbose_name='Boundry Position')),
                ('boundry_zoom', models.FloatField(blank=True, help_text="The centre zoom to apply for every map rendered on the user's screen.", null=True, verbose_name='Boundry Map Zoom')),
                ('boundry_polygon', django.contrib.gis.db.models.fields.PolygonField(blank=True, help_text="The polygon of the watch's boundry.", null=True, srid=4326, verbose_name='Boundry Polygon')),
                ('indexed_text', models.CharField(blank=True, db_index=True, help_text='The searchable content text used by the keyword searcher function.', max_length=1023, null=True, unique=True, verbose_name='Indexed Text')),
                ('slug', models.SlugField(help_text='The unique identifier used externally.', max_length=255, unique=True, verbose_name='Slug')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('created_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the creator.', null=True, verbose_name='Created from')),
                ('created_from_is_public', models.BooleanField(blank=True, default=False, help_text='Is creator a public IP and is routable.', verbose_name='Is the IP ')),
                ('created_from_position', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text='The latitude and longitude coordinates for the creator.', null=True, srid=4326, verbose_name='Created from position')),
                ('last_modified_at', models.DateTimeField(auto_now=True)),
                ('last_modified_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the modifier.', null=True, verbose_name='Last modified from')),
                ('last_modified_from_is_public', models.BooleanField(blank=True, default=False, help_text='Is modifier a public IP and is routable.', verbose_name='Is the IP ')),
                ('last_modified_from_position', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text='The latitude and longitude coordinates for the last modified user.', null=True, srid=4326, verbose_name='Last modified from position')),
                ('created_by', models.ForeignKey(blank=True, help_text='The user whom created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_watches', to=settings.AUTH_USER_MODEL)),
                ('district', models.ForeignKey(help_text='The district whom this watch belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='watches', to='tenant_foundation.District')),
                ('governors', models.ManyToManyField(blank=True, help_text='The area coordinator which are responsible for the operation of the district.', related_name='governing', to='tenant_foundation.AreaCoordinator')),
                ('last_modified_by', models.ForeignKey(blank=True, help_text='The user whom modified this object last.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='last_modified_watches', to=settings.AUTH_USER_MODEL)),
                ('tags', models.ManyToManyField(blank=True, help_text='The tags associated with this watch.', related_name='watches', to='tenant_foundation.Tag')),
            ],
            options={
                'verbose_name': 'Watch',
                'verbose_name_plural': 'Watches',
                'db_table': 'nwapp_watches',
                'permissions': (),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='WatchComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(help_text='The unique identifier used externally.', max_length=255, unique=True, verbose_name='Slug')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('created_from_position', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text='The latitude and longitude coordinates for the creator.', null=True, srid=4326, verbose_name='Created from position')),
                ('comment', models.ForeignKey(help_text='The comment this item belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='watch_comments', to='tenant_foundation.Comment')),
                ('watch', models.ForeignKey(help_text='The watch whom this comment is about.', on_delete=django.db.models.deletion.CASCADE, related_name='watch_comments', to='tenant_foundation.Watch')),
            ],
            options={
                'verbose_name': 'Watch Comment',
                'verbose_name_plural': 'Watch Comments',
                'db_table': 'nwapp_watch_comments',
                'ordering': ['-created_at'],
                'permissions': (),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='UnifiedSearchItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(blank=True, db_index=True, help_text='The searchable content text used by the keyword searcher function.', max_length=2047, null=True, unique=True, verbose_name='Text')),
                ('slug', models.CharField(db_index=True, help_text='The external identifier of the object.', max_length=255, unique=True, verbose_name='Slug')),
                ('type_of', models.PositiveSmallIntegerField(choices=[(1, 'Customer'), (2, 'Area Coordinator'), (3, 'Associate'), (4, 'Staff'), (5, 'Item'), (6, 'Watch'), (7, 'District'), (8, 'File')], db_index=True, help_text='The type of item this is.', verbose_name='Type of')),
                ('description', models.CharField(blank=True, help_text='The title of the object to display.', max_length=255, null=True, verbose_name='Description')),
                ('created_at', models.DateTimeField(blank=True, help_text='When the object was created.', null=True, verbose_name='Created At')),
                ('created_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the creator.', null=True, verbose_name='Created from')),
                ('created_from_is_public', models.BooleanField(blank=True, default=False, help_text='Is creator a public IP and is routable.', verbose_name='Is the IP ')),
                ('created_from_position', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text='The latitude and longitude coordinates for the creator.', null=True, srid=4326, verbose_name='Created from position')),
                ('last_modified_at', models.DateTimeField(blank=True, help_text='When the object was last modified.', null=True, verbose_name='Last Modified At')),
                ('last_modified_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the modifier.', null=True, verbose_name='Last modified from')),
                ('last_modified_from_is_public', models.BooleanField(blank=True, default=False, help_text='Is modifier a public IP and is routable.', verbose_name='Is the IP ')),
                ('last_modified_from_position', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text='The latitude and longitude coordinates for the last modified user.', null=True, srid=4326, verbose_name='Last modified from position')),
                ('area_coordinator', models.OneToOneField(blank=True, help_text='The area coordinator of this search item.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='unified_search_item', to='tenant_foundation.AreaCoordinator')),
                ('associate', models.OneToOneField(blank=True, help_text='The associate of this search item.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='unified_search_item', to='tenant_foundation.Associate')),
                ('created_by', models.ForeignKey(blank=True, help_text='The user whom created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_unified_search_items', to=settings.AUTH_USER_MODEL)),
                ('district', models.OneToOneField(blank=True, help_text='The district of this search item.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='unified_search_item', to='tenant_foundation.District')),
                ('file', models.OneToOneField(blank=True, help_text='The file of this search item.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='unified_search_item', to='tenant_foundation.PrivateFileUpload')),
                ('item', models.OneToOneField(blank=True, help_text='The work-order of this search item.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='unified_search_item', to='tenant_foundation.Item')),
                ('last_modified_by', models.ForeignKey(blank=True, help_text='The user whom modified this object last.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='last_modified_unified_search_items', to=settings.AUTH_USER_MODEL)),
                ('member', models.OneToOneField(blank=True, help_text='The member of this search item.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='unified_search_item', to='tenant_foundation.Member')),
                ('staff', models.OneToOneField(blank=True, help_text='The staff of this search item.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='unified_search_item', to='tenant_foundation.Staff')),
                ('tags', models.ManyToManyField(blank=True, help_text='The tags with this unified search item.', related_name='unified_search_items', to='tenant_foundation.Tag')),
                ('watch', models.OneToOneField(blank=True, help_text='The watch of this search item.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='unified_search_item', to='tenant_foundation.Watch')),
            ],
            options={
                'verbose_name': 'Unified Search Item',
                'verbose_name_plural': 'Unified Search Items',
                'db_table': 'nwapp_unified_search_items',
                'permissions': (),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='TaskItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, help_text='The unique identifier we want to release to the public to identify this task item.', verbose_name='UUID')),
                ('state', models.PositiveSmallIntegerField(choices=[(1, 'Unassigned'), (2, 'Pending'), (3, 'Closed')], db_index=True, help_text='The state of task item.', verbose_name='State')),
                ('type_of', models.PositiveSmallIntegerField(choices=[(1, 'Assign Area Coordinator to Watch'), (2, 'Assign Associate to Watch'), (3, 'Assign Associate to District'), (4, 'Action a NW concern item'), (5, 'Action a NW item item')], db_index=True, help_text='The type of task item this is.', verbose_name='Type of')),
                ('due_date', models.DateField(blank=True, db_index=True, default=tenant_foundation.models.task_item.get_todays_date, help_text='The date that this task must be finished by.', verbose_name='Due Date')),
                ('indexed_text', models.CharField(blank=True, db_index=True, help_text='The searchable content text used by the keyword searcher function.', max_length=1023, null=True, unique=True, verbose_name='Indexed Text')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('created_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the creator.', null=True, verbose_name='Created from')),
                ('created_from_is_public', models.BooleanField(blank=True, default=False, help_text='Is creator a public IP and is routable.', verbose_name='Is the IP ')),
                ('created_from_position', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text='The latitude and longitude coordinates for the creator.', null=True, srid=4326, verbose_name='Created from position')),
                ('last_modified_at', models.DateTimeField(auto_now=True)),
                ('last_modified_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the modifier.', null=True, verbose_name='Last modified from')),
                ('last_modified_from_is_public', models.BooleanField(blank=True, default=False, help_text='Is modifier a public IP and is routable.', verbose_name='Is the IP ')),
                ('last_modified_from_position', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text='The latitude and longitude coordinates for the last modified user.', null=True, srid=4326, verbose_name='Last modified from position')),
                ('area_coordinator', models.ForeignKey(blank=True, help_text='The area coordinator related to this task item.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='task_items', to='tenant_foundation.AreaCoordinator')),
                ('associate', models.ForeignKey(blank=True, help_text='The associate related to this task item.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='task_items', to='tenant_foundation.Associate')),
                ('created_by', models.ForeignKey(blank=True, help_text='The user whom created this order.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_task_items', to=settings.AUTH_USER_MODEL)),
                ('district', models.ForeignKey(blank=True, help_text='The district whom this task item belongs to.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='task_items', to='tenant_foundation.District')),
                ('item', models.ForeignKey(blank=True, help_text='The item this task item belongs to.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='task_items', to='tenant_foundation.Item')),
                ('last_modified_by', models.ForeignKey(blank=True, help_text='The user whom last modified this order.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='last_modified_task_items', to=settings.AUTH_USER_MODEL)),
                ('member', models.ForeignKey(blank=True, help_text='The associate related to this task item.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='task_items', to='tenant_foundation.Member')),
                ('next_task_item', models.ForeignKey(blank=True, help_text='The next task item that belongs to this task item.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='tenant_foundation.TaskItem')),
                ('previous_task_item', models.ForeignKey(blank=True, help_text='The previous task item that belongs to this task item.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='tenant_foundation.TaskItem')),
                ('staff', models.ForeignKey(blank=True, help_text='The staff member which is responsibel for processing this task item.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='task_items', to='tenant_foundation.Staff')),
                ('tags', models.ManyToManyField(blank=True, help_text='The tags associated with this task item.', related_name='task_items', to='tenant_foundation.Tag')),
                ('watch', models.ForeignKey(blank=True, help_text='The watch this task item belongs to.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='task_items', to='tenant_foundation.Watch')),
            ],
            options={
                'verbose_name': 'Task Item',
                'verbose_name_plural': 'Task Items',
                'db_table': 'nwapp_task_items',
                'ordering': ['due_date'],
                'permissions': (),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='StreetAddressRange',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('street_number_start', models.PositiveSmallIntegerField(help_text='Please select the street number start range.', verbose_name='Street Number Start')),
                ('street_number_end', models.PositiveSmallIntegerField(help_text='Please select the street number end range.', verbose_name='Street Number End')),
                ('street_number_range_type', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'All'), (2, 'Odd'), (3, 'Even')], default=1, help_text='Please select the street number range type.', verbose_name='Street Number Range Type')),
                ('street_numbers', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveSmallIntegerField(), blank=True, help_text='The street numbers in our range. Note: Internal implementation.', null=True, size=None)),
                ('street_name', models.CharField(db_index=True, help_text='The name of the street.', max_length=63, verbose_name='Street Name')),
                ('street_type', models.PositiveSmallIntegerField(choices=[(2, 'Avenue'), (3, 'Drive'), (4, 'Road'), (5, 'Street'), (6, 'Way'), (1, 'Other')], help_text='Please select the street type.', verbose_name='Street Type')),
                ('street_type_other', models.CharField(blank=True, help_text='Please select the street type not listed in our types.', max_length=127, null=True, verbose_name='Street Type (Other)')),
                ('street_direction', models.PositiveSmallIntegerField(blank=True, choices=[(0, '-'), (1, 'East'), (2, 'North'), (3, 'North East'), (4, 'North West'), (5, 'South'), (6, 'South East'), (7, 'South West'), (8, 'West')], default=0, help_text='Please select the street direction.', verbose_name='Street Direction')),
                ('is_archived', models.BooleanField(blank=True, db_index=True, default=False, help_text='Indicates whether tag was archived.', verbose_name='Is Archived')),
                ('slug', models.SlugField(help_text='The unique identifier used externally.', max_length=255, unique=True, verbose_name='Slug')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('created_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the creator.', null=True, verbose_name='Created from')),
                ('created_from_is_public', models.BooleanField(blank=True, default=False, help_text='Is creator a public IP and is routable.', verbose_name='Is the IP ')),
                ('created_from_position', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text='The latitude and longitude coordinates for the creator.', null=True, srid=4326, verbose_name='Created from position')),
                ('last_modified_at', models.DateTimeField(auto_now=True)),
                ('last_modified_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the modifier.', null=True, verbose_name='Last modified from')),
                ('last_modified_from_is_public', models.BooleanField(blank=True, default=False, help_text='Is modifier a public IP and is routable.', verbose_name='Is the IP ')),
                ('last_modified_from_position', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text='The latitude and longitude coordinates for the last modified user.', null=True, srid=4326, verbose_name='Last modified from position')),
                ('created_by', models.ForeignKey(blank=True, help_text='The user whom created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_street_address_ranges', to=settings.AUTH_USER_MODEL)),
                ('last_modified_by', models.ForeignKey(blank=True, help_text='The user whom modified this object last.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='last_modified_street_address_ranges', to=settings.AUTH_USER_MODEL)),
                ('watch', models.ForeignKey(help_text='The watch whom this street address range belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='street_address_ranges', to='tenant_foundation.Watch')),
            ],
            options={
                'verbose_name': 'Street Address Range',
                'verbose_name_plural': 'Street Address Ranges',
                'db_table': 'nwapp_street_address_ranges',
                'permissions': (),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='StaffComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(help_text='The unique identifier used externally.', max_length=255, unique=True, verbose_name='Slug')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('created_from_position', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text='The latitude and longitude coordinates for the creator.', null=True, srid=4326, verbose_name='Created from position')),
                ('comment', models.ForeignKey(help_text='The comment this item belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='area_staffs', to='tenant_foundation.Comment')),
                ('staff', models.ForeignKey(help_text='The area coordinator whom this comment is about.', on_delete=django.db.models.deletion.CASCADE, related_name='staff_comments', to='tenant_foundation.Staff')),
            ],
            options={
                'verbose_name': 'Staff Comment',
                'verbose_name_plural': 'Staff Comments',
                'db_table': 'nwapp_staff_comments',
                'ordering': ['-created_at'],
                'permissions': (),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='ScorePoint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_of', models.PositiveSmallIntegerField(choices=[(2, 'Neighbourhood Watch Donation'), (3, 'Daily Usage'), (1, 'Other')], db_index=True, help_text='The type of score point this is.', verbose_name='Type of')),
                ('type_of_other', models.CharField(blank=True, help_text='The specific description of the type of score point this is.', max_length=63, null=True, verbose_name='Type of (Other)')),
                ('description_other', models.CharField(blank=True, help_text='The custom description override by the staff if the `Other` type was selected for this score point.', max_length=255, null=True, verbose_name='Description (Other)')),
                ('amount', models.PositiveSmallIntegerField(blank=True, default=0, help_text='The amount number awarded for this score point.', verbose_name='Amount')),
                ('is_archived', models.BooleanField(blank=True, db_index=True, default=False, help_text="Indicates whether score point was archived and not applied to the user's total score.", verbose_name='Is Archived')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='The unique identifier we want to release to the public to identify this unique score point.', verbose_name='UUID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('created_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the creator.', null=True, verbose_name='Created from')),
                ('created_from_is_public', models.BooleanField(blank=True, default=False, help_text='Is creator a public IP and is routable.', verbose_name='Is the IP ')),
                ('created_from_position', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text='The latitude and longitude coordinates for the creator.', null=True, srid=4326, verbose_name='Created from position')),
                ('last_modified_at', models.DateTimeField(auto_now=True)),
                ('last_modified_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the modifier.', null=True, verbose_name='Last modified from')),
                ('last_modified_from_is_public', models.BooleanField(blank=True, default=False, help_text='Is modifier a public IP and is routable.', verbose_name='Is the IP ')),
                ('last_modified_from_position', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text='The latitude and longitude coordinates for the last modified user.', null=True, srid=4326, verbose_name='Last modified from position')),
                ('created_by', models.ForeignKey(blank=True, help_text='The user whom created this score point.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_score_points', to=settings.AUTH_USER_MODEL)),
                ('last_modified_by', models.ForeignKey(blank=True, help_text='The user whom last modified this private image upload.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='last_modified_score_points', to=settings.AUTH_USER_MODEL)),
                ('tags', models.ManyToManyField(blank=True, help_text='The tags associated with this score point.', related_name='score_points', to='tenant_foundation.Tag')),
                ('user', models.ForeignKey(help_text='The user whom owns these score point.', on_delete=django.db.models.deletion.CASCADE, related_name='score_points', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Score Point',
                'verbose_name_plural': 'Score Points',
                'db_table': 'nwapp_score_points',
                'ordering': ['-created_at'],
                'permissions': (),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='ResourceItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.PositiveSmallIntegerField(choices=[(2, 'Health'), (3, 'Housing'), (4, 'Loneliness'), (5, 'Food and Nutrition'), (6, 'Education'), (7, 'Municipal'), (8, 'Police'), (9, 'Fire'), (10, 'Emergency')], db_index=True, help_text='The type of score point this is.', verbose_name='Category')),
                ('type_of', models.PositiveSmallIntegerField(choices=[(2, 'Link'), (3, 'YouTube Video'), (4, 'Image'), (5, 'File')], db_index=True, help_text='The type of score point this is.', verbose_name='Type of')),
                ('name', models.CharField(db_index=True, help_text='The the name of this resource item.', max_length=31, unique=True, verbose_name='Name')),
                ('external_url', models.URLField(blank=True, help_text='The external website link of this resource item.', max_length=255, null=True, verbose_name='External URL')),
                ('embed_code', models.TextField(blank=True, help_text='The embed code of this resource item.', null=True, verbose_name='Embed Code')),
                ('description', models.TextField(blank=True, help_text='The description of this resource item.', null=True, verbose_name='Description')),
                ('is_archived', models.BooleanField(blank=True, db_index=True, default=False, help_text='Indicates whether resource item was archived.', verbose_name='Is Archived')),
                ('slug', models.SlugField(help_text='The unique identifier used externally.', max_length=255, unique=True, verbose_name='Slug')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('created_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the creator.', null=True, verbose_name='Created from')),
                ('created_from_is_public', models.BooleanField(blank=True, default=False, help_text='Is creator a public IP and is routable.', verbose_name='Is the IP ')),
                ('created_from_position', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text='The latitude and longitude coordinates for the creator.', null=True, srid=4326, verbose_name='Created from position')),
                ('last_modified_at', models.DateTimeField(auto_now=True)),
                ('last_modified_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the modifier.', null=True, verbose_name='Last modified from')),
                ('last_modified_from_is_public', models.BooleanField(blank=True, default=False, help_text='Is modifier a public IP and is routable.', verbose_name='Is the IP ')),
                ('last_modified_from_position', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text='The latitude and longitude coordinates for the last modified user.', null=True, srid=4326, verbose_name='Last modified from position')),
                ('created_by', models.ForeignKey(blank=True, help_text='The user whom created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_resource_items', to=settings.AUTH_USER_MODEL)),
                ('file', models.ForeignKey(blank=True, help_text='The file of this resource item.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resource_items', to='tenant_foundation.PrivateFileUpload')),
                ('image', models.ForeignKey(blank=True, help_text='The image of this resource item.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resource_items', to='tenant_foundation.PrivateImageUpload')),
                ('last_modified_by', models.ForeignKey(blank=True, help_text='The user whom modified this object last.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='last_modified_resource_items', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Resource Item',
                'verbose_name_plural': 'Resource Items',
                'db_table': 'nwapp_resource_items',
                'permissions': (),
                'default_permissions': (),
            },
        ),
        migrations.AddField(
            model_name='privateimageupload',
            name='tags',
            field=models.ManyToManyField(blank=True, help_text='The tags associated with this private file uploads.', related_name='private_image_uploads', to='tenant_foundation.Tag'),
        ),
        migrations.AddField(
            model_name='privateimageupload',
            name='user',
            field=models.ForeignKey(help_text='The user whom this belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='private_image_uploads', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='privateimageupload',
            name='watch',
            field=models.ForeignKey(blank=True, help_text='The watch whom this image belongs to.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='private_image_uploads', to='tenant_foundation.Watch'),
        ),
        migrations.AddField(
            model_name='privatefileupload',
            name='tags',
            field=models.ManyToManyField(blank=True, help_text='The tags associated with this private file uploads.', related_name='private_file_uploads', to='tenant_foundation.Tag'),
        ),
        migrations.AddField(
            model_name='privatefileupload',
            name='user',
            field=models.ForeignKey(help_text='The user whom this belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='private_file_uploads', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='privatefileupload',
            name='watch',
            field=models.ForeignKey(blank=True, help_text='The watch whom this file belongs to.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='private_file_uploads', to='tenant_foundation.Watch'),
        ),
        migrations.CreateModel(
            name='MemberComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(help_text='The unique identifier used externally.', max_length=255, unique=True, verbose_name='Slug')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('comment', models.ForeignKey(help_text='The comment this item belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='member_comments', to='tenant_foundation.Comment')),
                ('member', models.ForeignKey(help_text='The member whom this comment is about.', on_delete=django.db.models.deletion.CASCADE, related_name='member_comments', to='tenant_foundation.Member')),
            ],
            options={
                'verbose_name': 'Member Comment',
                'verbose_name_plural': 'Member Comments',
                'db_table': 'nwapp_member_comments',
                'ordering': ['-created_at'],
                'permissions': (),
                'default_permissions': (),
            },
        ),
        migrations.AddField(
            model_name='member',
            name='avatar_image',
            field=models.ForeignKey(blank=True, help_text='The avatar image of this member.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='members', to='tenant_foundation.PrivateImageUpload'),
        ),
        migrations.AddField(
            model_name='member',
            name='created_by',
            field=models.ForeignKey(blank=True, help_text='The user whom created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_members', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='member',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, help_text='The user whom modified this object last.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='last_modified_members', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='member',
            name='watch',
            field=models.ForeignKey(blank=True, help_text='The watch this member belongs to.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='members', to='tenant_foundation.Watch'),
        ),
        migrations.CreateModel(
            name='ItemType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.PositiveSmallIntegerField(choices=[(2, 'Incident'), (3, 'Event'), (4, 'Concern'), (5, 'Information'), (6, 'Community News'), (7, 'Volunteer'), (8, 'Resource')], db_index=True, help_text='The category this type of belongs to.', verbose_name='Category')),
                ('text', models.CharField(db_index=True, help_text='The text content of this item type.', max_length=127, verbose_name='Text')),
                ('description', models.TextField(blank=True, default='', help_text='A short description of this item type.', null=True, verbose_name='Description')),
                ('is_archived', models.BooleanField(blank=True, db_index=True, default=False, help_text='Indicates whether item type was archived.', verbose_name='Is Archived')),
                ('slug', models.SlugField(help_text='The unique identifier used externally.', max_length=255, unique=True, verbose_name='Slug')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('created_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the creator.', null=True, verbose_name='Created from')),
                ('created_from_is_public', models.BooleanField(blank=True, default=False, help_text='Is creator a public IP and is routable.', verbose_name='Is the IP ')),
                ('created_from_position', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text='The latitude and longitude coordinates for the creator.', null=True, srid=4326, verbose_name='Created from position')),
                ('last_modified_at', models.DateTimeField(auto_now=True)),
                ('last_modified_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the modifier.', null=True, verbose_name='Last modified from')),
                ('last_modified_from_is_public', models.BooleanField(blank=True, default=False, help_text='Is modifier a public IP and is routable.', verbose_name='Is the IP ')),
                ('last_modified_from_position', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text='The latitude and longitude coordinates for the last modified user.', null=True, srid=4326, verbose_name='Last modified from position')),
                ('created_by', models.ForeignKey(blank=True, help_text='The user whom created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_item_types', to=settings.AUTH_USER_MODEL)),
                ('last_modified_by', models.ForeignKey(blank=True, help_text='The user whom modified this object last.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='last_modified_item_types', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Item Type',
                'verbose_name_plural': 'Item Types',
                'db_table': 'nwapp_item_types',
                'permissions': (),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='ItemComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(help_text='The unique identifier used externally.', max_length=255, unique=True, verbose_name='Slug')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('created_from_position', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text='The latitude and longitude coordinates for the creator.', null=True, srid=4326, verbose_name='Created from position')),
                ('comment', models.ForeignKey(help_text='The comment this item belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='item_comments', to='tenant_foundation.Comment')),
                ('item', models.ForeignKey(help_text='The item whom this comment is about.', on_delete=django.db.models.deletion.CASCADE, related_name='item_comments', to='tenant_foundation.Item')),
            ],
            options={
                'verbose_name': 'Item Comment',
                'verbose_name_plural': 'Item Comments',
                'db_table': 'nwapp_item_comments',
                'ordering': ['-created_at'],
                'permissions': (),
                'default_permissions': (),
            },
        ),
        migrations.AddField(
            model_name='item',
            name='event_logo_image',
            field=models.ForeignKey(blank=True, help_text='The logo image of this event item.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='event_logo_items', to='tenant_foundation.PrivateImageUpload'),
        ),
        migrations.AddField(
            model_name='item',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, help_text='The user whom modified this object last.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='last_modified_items', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='item',
            name='resource_file',
            field=models.ForeignKey(blank=True, help_text='The resource file of this item.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resource_file_items', to='tenant_foundation.PrivateFileUpload'),
        ),
        migrations.AddField(
            model_name='item',
            name='resource_image',
            field=models.ForeignKey(blank=True, help_text='The resource image of this item.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resource_image_items', to='tenant_foundation.PrivateImageUpload'),
        ),
        migrations.AddField(
            model_name='item',
            name='type_of',
            field=models.ForeignKey(help_text='The custom type of item this is.', on_delete=django.db.models.deletion.CASCADE, related_name='type_ofs', to='tenant_foundation.ItemType'),
        ),
        migrations.CreateModel(
            name='HowHearAboutUsItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(db_index=True, help_text='The text content of this item.', max_length=127, unique=True, verbose_name='Text')),
                ('sort_number', models.PositiveSmallIntegerField(blank=True, db_index=True, default=0, help_text='The number this item will appear when sorted by number.', verbose_name='Sort #')),
                ('is_for_associate', models.BooleanField(blank=True, default=True, help_text='Indicates this option will be visible for the associate.', verbose_name='Is for associate')),
                ('is_for_customer', models.BooleanField(blank=True, default=True, help_text='Indicates this option will be visible for the customer.', verbose_name='Is for customer')),
                ('is_for_staff', models.BooleanField(blank=True, default=True, help_text='Indicates this option will be visible for the staff.', verbose_name='Is for staff')),
                ('is_for_partner', models.BooleanField(blank=True, default=True, help_text='Indicates this option will be visible for the partner.', verbose_name='Is for partner')),
                ('is_archived', models.BooleanField(blank=True, db_index=True, default=False, help_text='Indicates whether how hear item was archived.', verbose_name='Is Archived')),
                ('slug', models.SlugField(help_text='The unique identifier used externally.', max_length=255, unique=True, verbose_name='Slug')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('created_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the creator.', null=True, verbose_name='Created from')),
                ('created_from_is_public', models.BooleanField(blank=True, default=False, help_text='Is creator a public IP and is routable.', verbose_name='Is the IP ')),
                ('created_from_position', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text='The latitude and longitude coordinates for the creator.', null=True, srid=4326, verbose_name='Created from position')),
                ('last_modified_at', models.DateTimeField(auto_now=True)),
                ('last_modified_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the modifier.', null=True, verbose_name='Last modified from')),
                ('last_modified_from_is_public', models.BooleanField(blank=True, default=False, help_text='Is modifier a public IP and is routable.', verbose_name='Is the IP ')),
                ('last_modified_from_position', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text='The latitude and longitude coordinates for the last modified user.', null=True, srid=4326, verbose_name='Last modified from position')),
                ('created_by', models.ForeignKey(blank=True, help_text='The user whom created this score point.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_how_did_you_hear_about_us_items', to=settings.AUTH_USER_MODEL)),
                ('last_modified_by', models.ForeignKey(blank=True, help_text='The user whom last modified this private image upload.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='last_modified_how_did_you_hear_about_us_items', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'How Hear About Us Item',
                'verbose_name_plural': 'How Hear About Us Items',
                'db_table': 'nwapp_how_did_you_hear_about_us_items',
                'permissions': (),
                'default_permissions': (),
            },
        ),
        migrations.AddField(
            model_name='district',
            name='logo_image',
            field=models.ForeignKey(blank=True, help_text='The logo image of this district.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='districts', to='tenant_foundation.PrivateImageUpload'),
        ),
        migrations.AddField(
            model_name='district',
            name='tags',
            field=models.ManyToManyField(blank=True, help_text='The tags associated with this district.', related_name='districts', to='tenant_foundation.Tag'),
        ),
        migrations.CreateModel(
            name='Badge',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('type_of', models.PositiveSmallIntegerField(choices=[(2, 'Neighbourhood Watch Supporter'), (1, 'Other')], db_index=True, help_text='The type of score point this is.', verbose_name='Type of')),
                ('type_of_other', models.CharField(blank=True, help_text='The specific description of the type of score point this is.', max_length=63, null=True, verbose_name='Type of (Other)')),
                ('icon', models.CharField(help_text='The (fontawesome) icon used to describe this badge.', max_length=64, verbose_name='Icon')),
                ('colour', models.CharField(help_text='The colour of the badge.', max_length=64, verbose_name='Colour')),
                ('description_other', models.CharField(blank=True, help_text='The specific description for this badge.', max_length=255, null=True, verbose_name='Description (Other)')),
                ('is_archived', models.BooleanField(blank=True, db_index=True, default=False, help_text="Indicates whether score point was archived and not applied to the user's total score.", verbose_name='Is Archived')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='The unique identifier we want to release to the public to identify this unique badge.', verbose_name='UUID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('created_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the creator.', null=True, verbose_name='Created from')),
                ('created_from_is_public', models.BooleanField(blank=True, default=False, help_text='Is creator a public IP and is routable.', verbose_name='Is the IP ')),
                ('created_from_position', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text='The latitude and longitude coordinates for the creator.', null=True, srid=4326, verbose_name='Created from position')),
                ('last_modified_at', models.DateTimeField(auto_now=True)),
                ('last_modified_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the modifier.', null=True, verbose_name='Last modified from')),
                ('last_modified_from_is_public', models.BooleanField(blank=True, default=False, help_text='Is modifier a public IP and is routable.', verbose_name='Is the IP ')),
                ('last_modified_from_position', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text='The latitude and longitude coordinates for the last modified user.', null=True, srid=4326, verbose_name='Last modified from position')),
                ('created_by', models.ForeignKey(blank=True, help_text='The user whom created this score point.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_badges', to=settings.AUTH_USER_MODEL)),
                ('last_modified_by', models.ForeignKey(blank=True, help_text='The user whom last modified this private image upload.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='last_modified_badges', to=settings.AUTH_USER_MODEL)),
                ('tags', models.ManyToManyField(blank=True, help_text='The tags associated with this badge.', related_name='badges', to='tenant_foundation.Tag')),
                ('user', models.ForeignKey(help_text='The user whom owns these score point.', on_delete=django.db.models.deletion.CASCADE, related_name='badges', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Badge',
                'verbose_name_plural': 'Badges',
                'db_table': 'nwapp_badges',
                'ordering': ['-created_at'],
                'permissions': (),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Award',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_of', models.PositiveSmallIntegerField(choices=[(2, 'Weekly User'), (1, 'Other')], db_index=True, help_text='The type of score point this is.', verbose_name='Type of')),
                ('type_other', models.CharField(blank=True, help_text='The specific description of the type of score point this is.', max_length=63, null=True, verbose_name='Type of (Other)')),
                ('icon', models.CharField(help_text='The (fontawesome) icon used to describe this award.', max_length=64, verbose_name='Icon')),
                ('colour', models.CharField(help_text='The colour of the award.', max_length=64, verbose_name='Colour')),
                ('description_other', models.CharField(blank=True, help_text='The specific description for this award.', max_length=255, null=True, verbose_name='Description (Other)')),
                ('is_archived', models.BooleanField(blank=True, db_index=True, default=False, help_text="Indicates whether score point was archived and not applied to the user's total score.", verbose_name='Is Archived')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='The unique identifier we want to release to the public to identify this unique award.', verbose_name='UUID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('created_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the creator.', null=True, verbose_name='Created from')),
                ('created_from_is_public', models.BooleanField(blank=True, default=False, help_text='Is creator a public IP and is routable.', verbose_name='Is the IP ')),
                ('created_from_position', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text='The latitude and longitude coordinates for the creator.', null=True, srid=4326, verbose_name='Created from position')),
                ('last_modified_at', models.DateTimeField(auto_now=True)),
                ('last_modified_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the modifier.', null=True, verbose_name='Last modified from')),
                ('last_modified_from_is_public', models.BooleanField(blank=True, default=False, help_text='Is modifier a public IP and is routable.', verbose_name='Is the IP ')),
                ('last_modified_from_position', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text='The latitude and longitude coordinates for the last modified user.', null=True, srid=4326, verbose_name='Last modified from position')),
                ('created_by', models.ForeignKey(blank=True, help_text='The user whom created this score point.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_awards', to=settings.AUTH_USER_MODEL)),
                ('last_modified_by', models.ForeignKey(blank=True, help_text='The user whom last modified this private image upload.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='last_modified_awards', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(help_text='The user whom owns these score point.', on_delete=django.db.models.deletion.CASCADE, related_name='awards', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Award',
                'verbose_name_plural': 'Awards',
                'db_table': 'nwapp_awards',
                'ordering': ['-created_at'],
                'permissions': (),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='AssociateComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(help_text='The unique identifier used externally.', max_length=255, unique=True, verbose_name='Slug')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('created_from_position', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text='The latitude and longitude coordinates for the creator.', null=True, srid=4326, verbose_name='Created from position')),
                ('associate', models.ForeignKey(help_text='The area coordinator whom this comment is about.', on_delete=django.db.models.deletion.CASCADE, related_name='associate_comments', to='tenant_foundation.Associate')),
                ('comment', models.ForeignKey(help_text='The comment this item belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='area_associates', to='tenant_foundation.Comment')),
            ],
            options={
                'verbose_name': 'Associate Comment',
                'verbose_name_plural': 'Associate Comments',
                'db_table': 'nwapp_associate_comments',
                'ordering': ['-created_at'],
                'permissions': (),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='AreaCoordinatorComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(help_text='The unique identifier used externally.', max_length=255, unique=True, verbose_name='Slug')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('area_coordinator', models.ForeignKey(help_text='The area coordinator whom this comment is about.', on_delete=django.db.models.deletion.CASCADE, related_name='area_coordinator_comments', to='tenant_foundation.AreaCoordinator')),
                ('comment', models.ForeignKey(help_text='The comment this item belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='area_coordinator_comments', to='tenant_foundation.Comment')),
            ],
            options={
                'verbose_name': 'Area Coordinator Comment',
                'verbose_name_plural': 'Area Coordinator Comments',
                'db_table': 'nwapp_area_coordinator_comments',
                'ordering': ['-created_at'],
                'permissions': (),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Announcement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(db_index=True, help_text='The text content of this announcement.', max_length=31, unique=True, verbose_name='Text')),
                ('is_archived', models.BooleanField(blank=True, db_index=True, default=False, help_text='Indicates whether announcement was archived.', verbose_name='Is Archived')),
                ('slug', models.SlugField(help_text='The unique identifier used externally.', max_length=255, unique=True, verbose_name='Slug')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('created_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the creator.', null=True, verbose_name='Created from')),
                ('created_from_is_public', models.BooleanField(blank=True, default=False, help_text='Is creator a public IP and is routable.', verbose_name='Is the IP ')),
                ('created_from_position', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text='The latitude and longitude coordinates for the creator.', null=True, srid=4326, verbose_name='Created from position')),
                ('last_modified_at', models.DateTimeField(auto_now=True)),
                ('last_modified_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the modifier.', null=True, verbose_name='Last modified from')),
                ('last_modified_from_is_public', models.BooleanField(blank=True, default=False, help_text='Is modifier a public IP and is routable.', verbose_name='Is the IP ')),
                ('last_modified_from_position', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text='The latitude and longitude coordinates for the last modified user.', null=True, srid=4326, verbose_name='Last modified from position')),
                ('created_by', models.ForeignKey(blank=True, help_text='The user whom created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_announcements', to=settings.AUTH_USER_MODEL)),
                ('last_modified_by', models.ForeignKey(blank=True, help_text='The user whom modified this object last.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='last_modified_announcements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Announcement',
                'verbose_name_plural': 'Announcements',
                'db_table': 'nwapp_announcements',
                'permissions': (),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='MemberMetric',
            fields=[
                ('member', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='metric', serialize=False, to='tenant_foundation.Member')),
                ('how_did_you_hear_other', models.CharField(blank=True, default='Did not answer', help_text='How member heared/learned about this NWApp.', max_length=2055, null=True, verbose_name='Learned about us (other)')),
                ('expectation_other', models.CharField(blank=True, default='Did not answer', help_text='-', max_length=2055, null=True, verbose_name='What do you expect from NW? (other)')),
                ('meaning_other', models.CharField(blank=True, default='Did not answer', help_text='-', max_length=2055, null=True, verbose_name='What does NW mean to you? (other)')),
                ('gender', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Male'), (2, 'Female'), (3, 'Prefer not to say')], default=3, help_text='Gender of the person. While `Male` and `Female` may be used, text strings are also acceptable for people who do not identify as a binary gender.', verbose_name='Gender')),
                ('willing_to_volunteer', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Yes'), (0, 'No'), (2, 'Maybe')], default=2, help_text='Are you willing to willing_to_volunteer as a area coordinator / associate', verbose_name='Willing to willing_to_volunteer?')),
                ('another_household_member_registered', models.BooleanField(default=False, help_text='Is there another member of your household which is registered with us?', null=True, verbose_name='Another Household Member Registered?')),
                ('year_of_birth', models.PositiveSmallIntegerField(blank=True, default=0, help_text='The year that this member was born in.', null=True, verbose_name='Year of Birth')),
                ('total_household_count', models.PositiveSmallIntegerField(blank=True, help_text='How many people are in your household?', null=True, verbose_name='Total Household Count')),
                ('over_18_years_household_count', models.PositiveSmallIntegerField(blank=True, help_text='How many people in your household are under the age of 18?', null=True, verbose_name='Under 18 Years Household Count')),
                ('organization_employee_count', models.PositiveSmallIntegerField(blank=True, help_text="The employee count at this member's organization.", null=True, verbose_name='Organization Employee Count')),
                ('organization_founding_year', models.PositiveSmallIntegerField(blank=True, help_text='The year this organization was founded.', null=True, verbose_name='Organization Founding Year')),
                ('is_aboriginal', models.BooleanField(blank=True, default=False, help_text='Is member an aborinal?', null=True, verbose_name='Is Aboriginal')),
                ('is_transgender', models.BooleanField(blank=True, default=False, help_text='Is member a transgender individual?', null=True, verbose_name='Is Transgender Individual')),
                ('is_visible_minority', models.BooleanField(blank=True, default=False, help_text='Is member a visible minority?', null=True, verbose_name='Is Visible Minority')),
                ('is_disabled_or_has_barriers', models.BooleanField(blank=True, default=False, help_text='Is member disabled or has physical barriers?', null=True, verbose_name='Is Disabled Or Has Barriers')),
                ('is_over_fifty_five', models.BooleanField(blank=True, default=False, help_text='Is member over 55?', null=True, verbose_name='Is Over 55')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('created_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the creator.', null=True, verbose_name='Created from')),
                ('last_modified_at', models.DateTimeField(auto_now=True)),
                ('created_from_is_public', models.BooleanField(blank=True, default=False, help_text='Is creator a public IP and is routable.', verbose_name='Is the IP ')),
                ('created_from_position', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text='The latitude and longitude coordinates for the creator.', null=True, srid=4326, verbose_name='Created from position')),
                ('last_modified_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the modifier.', null=True, verbose_name='Last modified from')),
                ('last_modified_from_is_public', models.BooleanField(blank=True, default=False, help_text='Is modifier a public IP and is routable.', verbose_name='Is the IP ')),
                ('last_modified_from_position', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text='The latitude and longitude coordinates for the last modified user.', null=True, srid=4326, verbose_name='Last modified from position')),
                ('created_by', models.ForeignKey(blank=True, help_text='The user whom created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_member_metrics', to=settings.AUTH_USER_MODEL)),
                ('expectation', models.ForeignKey(blank=True, help_text='What do you expect from NW?', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='member_metric_expectations', to='tenant_foundation.ExpectationItem')),
                ('how_did_you_hear', models.ForeignKey(blank=True, help_text='How the member heard about the NWApp.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='member_metric_how_did_you_hear_items', to='tenant_foundation.HowHearAboutUsItem')),
                ('last_modified_by', models.ForeignKey(blank=True, help_text='The user whom modified this object last.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='last_modified_member_metrics', to=settings.AUTH_USER_MODEL)),
                ('meaning', models.ForeignKey(blank=True, help_text='What does NW mean to you?', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='member_metric_meanings', to='tenant_foundation.MeaningItem')),
                ('tags', models.ManyToManyField(blank=True, help_text='The tags associated with this member.', related_name='member_metric_tags', to='tenant_foundation.Tag')),
            ],
            options={
                'verbose_name': 'Member Metric',
                'verbose_name_plural': 'Members Metrics',
                'db_table': 'nwapp_member_metrics',
                'permissions': (),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='MemberContact',
            fields=[
                ('member', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='contact', serialize=False, to='tenant_foundation.Member')),
                ('is_ok_to_email', models.BooleanField(blank=True, default=True, help_text='Indicates whether member allows being reached by email', verbose_name='Is OK to email')),
                ('is_ok_to_text', models.BooleanField(blank=True, default=True, help_text='Indicates whether member allows being reached by text.', verbose_name='Is OK to text')),
                ('organization_name', models.CharField(blank=True, help_text='The name of the organization or business this person represents.', max_length=255, null=True, verbose_name='Organization Name')),
                ('organization_type_of', models.PositiveSmallIntegerField(blank=True, choices=[(2, 'Private'), (3, 'Government'), (4, 'Non-Profit'), (1, 'Unspecified')], default=1, help_text='The type of organization this is based on Neighbourhood Watch Canada internal classification.', verbose_name='Organization Type of')),
                ('first_name', models.CharField(blank=True, help_text="The member's given name.", max_length=63, null=True, verbose_name='First Name')),
                ('last_name', models.CharField(blank=True, help_text="The member's sure name.", max_length=63, null=True, verbose_name='Last Name')),
                ('email', models.EmailField(blank=True, db_index=True, help_text='Email address.', max_length=254, null=True, validators=[django.core.validators.EmailValidator(message='Invalid email')], verbose_name='Email')),
                ('primary_phone', models.CharField(blank=True, help_text='The primary telephone number used by the member.', max_length=31, null=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')], verbose_name='Primary Telephone')),
                ('secondary_phone', models.CharField(blank=True, help_text='The secondary or other telephone number used by the member.', max_length=31, null=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')], verbose_name='Secondary Telephone')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('created_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the creator.', null=True, verbose_name='Created from')),
                ('created_from_is_public', models.BooleanField(blank=True, default=False, help_text='Is creator a public IP and is routable.', verbose_name='Is the IP ')),
                ('created_from_position', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text='The latitude and longitude coordinates for the creator.', null=True, srid=4326, verbose_name='Created from position')),
                ('last_modified_at', models.DateTimeField(auto_now=True)),
                ('last_modified_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the modifier.', null=True, verbose_name='Last modified from')),
                ('last_modified_from_is_public', models.BooleanField(blank=True, default=False, help_text='Is modifier a public IP and is routable.', verbose_name='Is the IP ')),
                ('last_modified_from_position', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text='The latitude and longitude coordinates for the last modified user.', null=True, srid=4326, verbose_name='Last modified from position')),
                ('created_by', models.ForeignKey(blank=True, help_text='The user whom created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_member_contacts', to=settings.AUTH_USER_MODEL)),
                ('last_modified_by', models.ForeignKey(blank=True, help_text='The user whom modified this object last.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='last_modified_member_contacts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Member Contact',
                'verbose_name_plural': 'Member Contacts',
                'db_table': 'nwapp_member_contacts',
                'permissions': (),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='MemberAddress',
            fields=[
                ('member', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='address', serialize=False, to='tenant_foundation.Member')),
                ('country', models.CharField(help_text='The country. For example, USA. You can also provide the two-letter <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements">ISO 3166-1 alpha-2</a> country code.', max_length=127, verbose_name='Country')),
                ('province', models.CharField(help_text='The province. For example, CA.', max_length=127, verbose_name='Province')),
                ('city', models.CharField(help_text='The city. For example, Mountain View.', max_length=127, verbose_name='City')),
                ('street_number', models.CharField(blank=True, help_text='-', max_length=127, null=True, verbose_name='Street Number')),
                ('street_name', models.CharField(blank=True, help_text='-', max_length=127, null=True, verbose_name='Street Name')),
                ('apartment_unit', models.CharField(blank=True, help_text='-', max_length=127, null=True, verbose_name='Apartment Unit')),
                ('street_type', models.PositiveSmallIntegerField(choices=[(2, 'Avenue'), (3, 'Drive'), (4, 'Road'), (5, 'Street'), (6, 'Way'), (1, 'Other')], help_text='Please select the street type.', verbose_name='Street Type')),
                ('street_type_other', models.CharField(blank=True, help_text='Please select the street type not listed in our types.', max_length=127, null=True, verbose_name='Street Type (Other)')),
                ('street_direction', models.PositiveSmallIntegerField(blank=True, choices=[(0, '-'), (1, 'East'), (2, 'North'), (3, 'North East'), (4, 'North West'), (5, 'South'), (6, 'South East'), (7, 'South West'), (8, 'West')], default=0, help_text='Please select the street direction.', verbose_name='Street Direction')),
                ('postal_code', models.CharField(blank=True, help_text='-', max_length=32, null=True, verbose_name='Postal Code')),
                ('position', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, null=True, srid=4326)),
                ('needs_geocoding', models.BooleanField(blank=True, default=True, help_text='Field controls if system need to geolocate the current address to get a new longitude and latitude coordinates. Any address change results in this field being changed to `True`.', verbose_name='Needs Geolocating')),
                ('geocoding_succeeded_at', models.DateTimeField(blank=True, help_text='The date and time the geocding process succeeded.', null=True, verbose_name='Geocoding Succeeded At')),
                ('geocoding_failed_at', models.DateTimeField(blank=True, help_text='The date and time the geocding process failed.', null=True, verbose_name='Geocoding Failed At')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('created_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the creator.', null=True, verbose_name='Created from')),
                ('created_from_is_public', models.BooleanField(blank=True, default=False, help_text='Is creator a public IP and is routable.', verbose_name='Is the IP ')),
                ('created_from_position', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text='The latitude and longitude coordinates for the creator.', null=True, srid=4326, verbose_name='Created from position')),
                ('last_modified_at', models.DateTimeField(auto_now=True)),
                ('last_modified_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the modifier.', null=True, verbose_name='Last modified from')),
                ('last_modified_from_is_public', models.BooleanField(blank=True, default=False, help_text='Is modifier a public IP and is routable.', verbose_name='Is the IP ')),
                ('last_modified_from_position', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text='The latitude and longitude coordinates for the last modified user.', null=True, srid=4326, verbose_name='Last modified from position')),
                ('created_by', models.ForeignKey(blank=True, help_text='The user whom created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_member_addresses', to=settings.AUTH_USER_MODEL)),
                ('last_modified_by', models.ForeignKey(blank=True, help_text='The user whom modified this object last.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='last_modified_member_addresses', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Member Address',
                'verbose_name_plural': 'Member Addresses',
                'db_table': 'nwapp_member_addresses',
                'permissions': (),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='AreaCoordinatorAddress',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('tenant_foundation.memberaddress',),
        ),
        migrations.CreateModel(
            name='AreaCoordinatorContact',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('tenant_foundation.membercontact',),
        ),
        migrations.CreateModel(
            name='AreaCoordinatorMetric',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('tenant_foundation.membermetric',),
        ),
        migrations.CreateModel(
            name='AssociateAddress',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('tenant_foundation.memberaddress',),
        ),
        migrations.CreateModel(
            name='AssociateContact',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('tenant_foundation.membercontact',),
        ),
        migrations.CreateModel(
            name='AssociateMetric',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('tenant_foundation.membermetric',),
        ),
        migrations.CreateModel(
            name='StaffAddress',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('tenant_foundation.memberaddress',),
        ),
        migrations.CreateModel(
            name='StaffContact',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('tenant_foundation.membercontact',),
        ),
        migrations.CreateModel(
            name='StaffMetric',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('tenant_foundation.membermetric',),
        ),
    ]
